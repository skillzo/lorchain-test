import Head from "next/head";
import { ReactQueryDevtools } from "react-query/devtools";
import HomeLayout from "@/components/layouts/HomeLayout";
import Profile from "@/components/profile/Profile";
import Repo from "@/components/cards/Repo";
import { useQuery } from "react-query";
import axios from "axios";
import SearchBar from "@/components/SearchBar";
import { useState } from "react";
import { PulseLoader } from "react-spinners";
import Feedbacks from "@/components/feedbacks/Feedbacks";
import { BsPerson, BsSearch } from "react-icons/bs";
import { MdCancelPresentation } from "react-icons/md";

export default function Home() {
  const [searchUser, setSearchUser] = useState("");
  const repoUrl = `https://api.github.com/users/${searchUser}/repos?page=1&per_page=4&sort=updated`;
  const userUrl = `https://api.github.com/users/${searchUser}`;

  // api call using react query
  const {
    data: userData,

    refetch: refetchUser,
  } = useQuery(
    "gitUser",
    async () => {
      return axios.get(userUrl);
    },
    {
      enabled: false,
    }
  );
  const {
    data: repoData,
    refetch: refetchRepo,
    isLoading,
    isError,
    error,
  } = useQuery(
    "repoList",
    async () => {
      return axios.get(repoUrl);
    },
    {
      enabled: false,
    }
  );

  // user information
  const user = userData?.data;
  const repo = repoData?.data;

  console.log(repo.length);
  // types
  return (
    <>
      <Head>
        <title>Lorchain - Test</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <SearchBar
        search={searchUser}
        setSearch={setSearchUser}
        refetchUser={refetchUser}
        refetchRepo={refetchRepo}
      />
      <HomeLayout>
        {/* initialState before user intracts */}

        {!userData && !repoData && !isLoading && (
          <Feedbacks
            component={<BsSearch size={100} />}
            text=" Start with searching a GitHub user"
          />
        )}

        {/* data is loading  */}
        {isLoading && (
          <Feedbacks
            component={
              <PulseLoader speedMultiplier={0.5} size={30} color="#0064EB" />
            }
          />
        )}

        {/* if an error occured */}
        {isError && (
          <Feedbacks
            component={<BsPerson size={100} />}
            text="User not found"
          />
        )}

        {/* render the user info */}
        {userData && (
          <div className="space-y-[3em] md:space-y-[5em] lg:space-y-0 lg:flex lg:justify-between">
            {userData && (
              <div className="lg:w-[25%]">
                <Profile user={user} />
              </div>
            )}

            {/* if the repo is empty */}
            {repo.length < 0 && (
              <Feedbacks
                component={<MdCancelPresentation size={100} />}
                text="User not found"
              />
            )}
            {repoData && (
              <section className="space-y-[1em] lg:w-[70%]">
                <h1 className="text-2xl font-semibold">
                  Repositories ({user?.public_repos})
                </h1>

                <div className="space-y-4 lg:w-[80%]">
                  {repo?.map((item: any) => {
                    return (
                      <Repo
                        key={item.id}
                        url={item.html_url}
                        name={item.name}
                        description={item.description}
                      />
                    );
                  })}
                </div>

                {/* paginate thr result */}
                <div className="border border-black flex justify-end">
                  paginante
                </div>
              </section>
            )}
          </div>
        )}

        <ReactQueryDevtools initialIsOpen={true} position={"bottom-right"} />
      </HomeLayout>
    </>
  );
}
